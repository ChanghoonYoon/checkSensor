import cv2
import numpy as np
from datetime import datetime
import time
import os

# 특정 경로 설정
desktop_path = r"C:\Users\changhoon\Desktop"

# YOLO 모델 로드 (절대 경로 사용)
weights_path = os.path.join(desktop_path, "yolov3.weights")
config_path = os.path.join(desktop_path, "yolov3.cfg")
names_path = os.path.join(desktop_path, "coco.names")

# 파일 존재 여부 확인
if not os.path.exists(weights_path):
    raise FileNotFoundError(f"yolov3.weights 파일을 찾을 수 없습니다: {weights_path}")
if not os.path.exists(config_path):
    raise FileNotFoundError(f"yolov3.cfg 파일을 찾을 수 없습니다: {config_path}")
if not os.path.exists(names_path):
    raise FileNotFoundError(f"coco.names 파일을 찾을 수 없습니다: {names_path}")

net = cv2.dnn.readNet(weights_path, config_path)

classes = []
with open(names_path, "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

# 노트북 내장 카메라 사용 (일반적으로 0번 인덱스)
cap = cv2.VideoCapture(0)

def detect_cars(frame):
    height, width, channels = frame.shape
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and class_id == 2:  # 2는 'car' 클래스 ID
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    font = cv2.FONT_HERSHEY_PLAIN
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, label, (x, y + 30), font, 3, (0, 255, 0), 3)

    return frame, len(indexes) > 0

def log_detection(detected):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_path = os.path.join(desktop_path, "car_detection_log.txt")
    with open(log_path, "a") as log_file:
        log_file.write(f"{timestamp}: {'Car detected' if detected else 'No car detected'}\n")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame")
            break

        processed_frame, car_detected = detect_cars(frame)
        
        cv2.imshow("Notebook Camera", processed_frame)
        log_detection(car_detected)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        time.sleep(0.1)  # 프레임 처리 간격 줄임 (더 부드러운 영상을 위해)

except KeyboardInterrupt:
    print("Program interrupted by user")

finally:
    cap.release()
    cv2.destroyAllWindows()